================================================================================
ÂéüÊùêÊñôÂ∫ìÂ≠òÁõ∏ÂÖ≥‰ª£Á†ÅÂ∫üÂºÉÂ≠óÊÆµÊ£ÄÊü•Êä•Âëä
================================================================================

üö® ÂèëÁé∞ÈóÆÈ¢òÊñá‰ª∂: 13 ‰∏™
üö® ÂèëÁé∞Â∫üÂºÉÂ≠óÊÆµÁ±ªÂûã: 32 Áßç
üö® ÂèëÁé∞ÈóÆÈ¢ò‰ª£Á†ÅË°å: 413 Ë°å

üìÅ Êñá‰ª∂: backend/src/routes/inventory.ts
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_types (1 Â§Ñ)
    Á¨¨224Ë°å: product_types,


üìÅ Êñá‰ª∂: backend/src/routes/inventory.ts.backup_20250913_130937
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_types (6 Â§Ñ)
    Á¨¨17Ë°å: product_types: z.union([
    Á¨¨43Ë°å: product_types: z.union([
    Á¨¨233Ë°å: product_types,
    Á¨¨252Ë°å: product_types,
    Á¨¨354Ë°å: if (product_types) {
    Á¨¨355Ë°å: const productTypesArray = Array.isArray(product_types) ? product_types : [product_types]

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_type (34 Â§Ñ)
    Á¨¨28Ë°å: sort_by: z.enum(['total_quantity', 'product_type', 'crystal_type']).optional()
    Á¨¨63Ë°å: product_type: true,
    Á¨¨264Ë°å: p.productType as product_type,
    Á¨¨345Ë°å: const productType = item.product_type
    Á¨¨380Ë°å: product_type: productType,
    Á¨¨442Ë°å: product_type: item.product_type,
    Á¨¨512Ë°å: product_type: level1.product_type,
    Á¨¨521Ë°å: const sortField = sort_by === 'product_type' ? 'product_type' : 'total_quantity'
    Á¨¨523Ë°å: if (sortField === 'product_type') {
    Á¨¨524Ë°å: return sort === 'asc' ? a.product_type.localeCompare(b.product_type) : b.product_type.localeCompare(a.product_type)
    Á¨¨1340Ë°å: p.productType as product_type,
    Á¨¨1426Ë°å: const { product_type, limit = 20 } = req.query
    Á¨¨1430Ë°å: if (product_type && product_type !== 'ALL') {
    Á¨¨1431Ë°å: whereClause = `WHERE p.productType = '${product_type}'`
    Á¨¨1438Ë°å: p.productType as product_type,
    Á¨¨1579Ë°å: p.productType as product_type,
    Á¨¨1678Ë°å: product_type = 'LOOSE_BEADS',
    Á¨¨1684Ë°å: product_type,
    Á¨¨1693Ë°å: if (product_type && product_type !== 'ALL') {
    Á¨¨1694Ë°å: productTypeCondition = `AND p.productType = '${product_type}'`
    Á¨¨1704Ë°å: WHEN product_type = 'FINISHED' AND calculated_price >= 0 AND calculated_price <= 50 THEN '0-50ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1705Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 50 AND calculated_price <= 100 THEN '50-100ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1706Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 100 AND calculated_price <= 200 THEN '100-200ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1707Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 200 AND calculated_price <= 500 THEN '200-500ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1708Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 500 THEN '500ÂÖÉ‰ª•‰∏ä'
    Á¨¨1710Ë°å: WHEN product_type != 'FINISHED' AND calculated_price >= 0 AND calculated_price <= 3 THEN '0-3ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1711Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 3 AND calculated_price <= 10 THEN '3-10ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1712Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 10 AND calculated_price <= 20 THEN '10-20ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1713Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 20 AND calculated_price <= 50 THEN '20-50ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1714Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 50 THEN '50ÂÖÉ‰ª•‰∏ä'
    Á¨¨1718Ë°å: FROM (          SELECT             p.productType as product_type,            CASE               WHEN p.productType = 'LOOSE_BEADS' AND p.totalBeads > 0 THEN p.totalPrice / p.totalBeads              WHEN p.productType = 'BRACELET' AND p.quantity > 0 THEN p.totalPrice / p.quantity              WHEN p.productType = 'ACCESSORIES' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              WHEN p.productType = 'FINISHED' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              ELSE NULL            END as calculated_price          FROM purchases p          WHERE p.status IN ('ACTIVE', 'PENDING')             AND p.totalPrice IS NOT NULL             AND p.totalPrice > 0            AND (              (p.productType = 'LOOSE_BEADS' AND p.totalBeads IS NOT NULL AND p.totalBeads > 0) OR              (p.productType = 'BRACELET' AND p.quantity IS NOT NULL AND p.quantity > 0) OR              (p.productType = 'ACCESSORIES' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0) OR              (p.productType = 'FINISHED' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0)            )            ${productTypeCondition}        ) as price_data
    Á¨¨1749Ë°å: product_type,
    Á¨¨1776Ë°å: p.productType as product_type,
    Á¨¨1848Ë°å: product_type,

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (25 Â§Ñ)
    Á¨¨62Ë°å: product_name: true,
    Á¨¨263Ë°å: p.productName as product_name,
    Á¨¨351Ë°å: if (search && !item.product_name.toLowerCase().includes(search.toLowerCase())) return
    Á¨¨441Ë°å: product_name: item.product_name,
    Á¨¨575Ë°å: sort_by = 'product_name'
    Á¨¨614Ë°å: p.productName as product_name,
    Á¨¨646Ë°å: ORDER BY ${sort_by === 'product_name' ? 'p.productName' : 'total_remaining_beads'} ${sort === 'asc' ? 'ASC' : 'DESC'}
    Á¨¨722Ë°å: const purchases = await prisma.$queryRawUnsafe(purchaseQuery, group.product_name) as any[]
    Á¨¨723Ë°å: console.log(`üîç [ÈááË¥≠ËÆ∞ÂΩïÊü•ËØ¢] ‰∫ßÂìÅ"${group.product_name}"ÁöÑÈááË¥≠ËÆ∞ÂΩï:`, purchases)
    Á¨¨807Ë°å: console.log(`‚úÖ [Âèò‰ΩìÂêàÂπ∂] ‰∫ßÂìÅ"${group.product_name}"ÂêàÂπ∂ÂêéÁöÑÂèò‰Ωì:`, {
    Á¨¨819Ë°å: product_name: group.product_name,
    Á¨¨922Ë°å: const validSortFields = ['purchase_date', 'created_at', 'remaining_beads', 'product_name']
    Á¨¨931Ë°å: p.productName as product_name,
    Á¨¨1025Ë°å: p.productName as product_name,
    Á¨¨1090Ë°å: sort_by: z.enum(['purchase_date', 'product_name', 'specification', 'remaining_quantity']).optional()
    Á¨¨1158Ë°å: if (sort_by === 'product_name') {
    Á¨¨1171Ë°å: p.productName as product_name,
    Á¨¨1292Ë°å: product_name: item.product_name,
    Á¨¨1298Ë°å: product_name: item.product_name,
    Á¨¨1437Ë°å: p.productName as product_name,
    Á¨¨1491Ë°å: name: item.product_name,
    Á¨¨1578Ë°å: p.productName as product_name,
    Á¨¨1775Ë°å: p.productName as product_name,
    Á¨¨1899Ë°å: p.productName as product_name,
    Á¨¨1969Ë°å: p.productName as product_name,

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: productName (37 Â§Ñ)
    Á¨¨96Ë°å: const parseProductClassification = (productName: string) => {
    Á¨¨143Ë°å: if (keywords.some(keyword => productName.includes(keyword))) {
    Á¨¨151Ë°å: if (keywords.some(keyword => productName.includes(keyword))) {
    Á¨¨158Ë°å: if (productName.includes('ÈöèÂΩ¢')) {
    Á¨¨263Ë°å: p.productName as product_name,
    Á¨¨330Ë°å: ORDER BY p.productType, p.productName,
    Á¨¨587Ë°å: whereClause += ' AND p.productName LIKE ?'
    Á¨¨614Ë°å: p.productName as product_name,
    Á¨¨645Ë°å: GROUP BY p.productName
    Á¨¨646Ë°å: ORDER BY ${sort_by === 'product_name' ? 'p.productName' : 'total_remaining_beads'} ${sort === 'asc' ? 'ASC' : 'DESC'}
    Á¨¨652Ë°å: SELECT COUNT(DISTINCT p.productName) as total
    Á¨¨718Ë°å: WHERE p.beadDiameter IS NOT NULL AND p.productName = ?
    Á¨¨898Ë°å: whereClause += ' AND p.productName LIKE ?'
    Á¨¨931Ë°å: p.productName as product_name,
    Á¨¨932Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨957Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨1025Ë°å: p.productName as product_name,
    Á¨¨1026Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨1043Ë°å: AND (p.productName LIKE ? OR s.name LIKE ?)
    Á¨¨1044Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨1135Ë°å: whereConditions.push('(p.productName LIKE ? OR s.name LIKE ?)')
    Á¨¨1159Ë°å: orderBy = `p.productName ${sort === 'asc' ? 'ASC' : 'DESC'}`
    Á¨¨1171Ë°å: p.productName as product_name,
    Á¨¨1437Ë°å: p.productName as product_name,
    Á¨¨1453Ë°å: GROUP BY p.productName, p.productType
    Á¨¨1578Ë°å: p.productName as product_name,
    Á¨¨1614Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification, p.quality, s.name
    Á¨¨1775Ë°å: p.productName as product_name,
    Á¨¨1807Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification,
    Á¨¨1899Ë°å: p.productName as product_name,
    Á¨¨1900Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨1929Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨1969Ë°å: p.productName as product_name,
    Á¨¨1970Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨1980Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨2025Ë°å: p.productName as '‰∫ßÂìÅÂêçÁß∞',
    Á¨¨2057Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: productType (78 Â§Ñ)
    Á¨¨264Ë°å: p.productType as product_type,
    Á¨¨271Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨272Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.totalBeads, p.pieceCount, 0)
    Á¨¨273Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨274Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨279Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨280Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.totalBeads, p.pieceCount, 0)
    Á¨¨281Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨282Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨287Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨288Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.totalBeads, p.pieceCount, 0)
    Á¨¨289Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨290Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨295Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN p.pricePerBead
    Á¨¨296Ë°å: WHEN p.productType = 'BRACELET' THEN
    Á¨¨303Ë°å: WHEN p.productType = 'ACCESSORIES' THEN
    Á¨¨310Ë°å: WHEN p.productType = 'FINISHED' THEN
    Á¨¨330Ë°å: ORDER BY p.productType, p.productName,
    Á¨¨345Ë°å: const productType = item.product_type
    Á¨¨356Ë°å: if (!productTypesArray.includes(productType)) return
    Á¨¨373Ë°å: const level1Key = productType
    Á¨¨374Ë°å: const level2Key = `${productType}|${specValue}${specUnit}`
    Á¨¨375Ë°å: const level3Key = `${productType}|${specValue}${specUnit}|${quality}`
    Á¨¨380Ë°å: product_type: productType,
    Á¨¨597Ë°å: whereClause += ' AND (CASE WHEN p.productType = "LOOSE_BEADS" THEN COALESCE(p.pieceCount, 0) WHEN p.productType = "BRACELET" THEN COALESCE(p.quantity, 0) WHEN p.productType = "ACCESSORIES" THEN COALESCE(p.pieceCount, 0) WHEN p.productType = "FINISHED" THEN COALESCE(p.pieceCount, 0) ELSE COALESCE(p.quantity, 0) END - COALESCE(mu.used_beads, 0)) <= p.minStockAlert'
    Á¨¨622Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨623Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨624Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨625Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨631Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨632Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨633Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨634Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨684Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨685Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨686Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨687Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨692Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨693Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨694Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨695Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨700Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨701Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨702Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨703Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨1130Ë°å: let whereConditions = ['p.productType = "FINISHED"']
    Á¨¨1179Ë°å: WHEN p.productType = 'FINISHED' AND p.pieceCount > 0 AND p.totalPrice IS NOT NULL
    Á¨¨1340Ë°å: p.productType as product_type,
    Á¨¨1343Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1344Ë°å: WHEN p.productType = 'BRACELET' THEN (p.totalBeads - COALESCE(mu.used_quantity, 0))
    Á¨¨1345Ë°å: WHEN p.productType = 'ACCESSORIES' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1346Ë°å: WHEN p.productType = 'FINISHED' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1355Ë°å: GROUP BY p.productType
    Á¨¨1356Ë°å: ORDER BY p.productType
    Á¨¨1431Ë°å: whereClause = `WHERE p.productType = '${product_type}'`
    Á¨¨1438Ë°å: p.productType as product_type,
    Á¨¨1440Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1441Ë°å: WHEN p.productType = 'BRACELET' THEN (p.totalBeads - COALESCE(mu.used_quantity, 0))
    Á¨¨1442Ë°å: WHEN p.productType = 'ACCESSORIES' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1443Ë°å: WHEN p.productType = 'FINISHED' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1453Ë°å: GROUP BY p.productName, p.productType
    Á¨¨1579Ë°å: p.productType as product_type,
    Á¨¨1586Ë°å: WHEN p.productType IN ('LOOSE_BEADS', 'BRACELET') THEN mu.quantityUsedBeads
    Á¨¨1587Ë°å: WHEN p.productType IN ('ACCESSORIES', 'FINISHED') THEN mu.quantityUsedPieces
    Á¨¨1594Ë°å: WHEN p.productType IN ('LOOSE_BEADS', 'BRACELET') THEN mu.quantityUsedBeads
    Á¨¨1595Ë°å: WHEN p.productType IN ('ACCESSORIES', 'FINISHED') THEN mu.quantityUsedPieces
    Á¨¨1602Ë°å: WHEN p.productType IN ('LOOSE_BEADS', 'BRACELET') THEN 'È¢ó'
    Á¨¨1603Ë°å: WHEN p.productType IN ('ACCESSORIES', 'FINISHED') THEN '‰ª∂'
    Á¨¨1611Ë°å: (p.productType IN ('LOOSE_BEADS', 'BRACELET') AND mu.quantityUsedBeads > 0) OR
    Á¨¨1612Ë°å: (p.productType IN ('ACCESSORIES', 'FINISHED') AND mu.quantityUsedPieces > 0)
    Á¨¨1614Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification, p.quality, s.name
    Á¨¨1694Ë°å: productTypeCondition = `AND p.productType = '${product_type}'`
    Á¨¨1718Ë°å: FROM (          SELECT             p.productType as product_type,            CASE               WHEN p.productType = 'LOOSE_BEADS' AND p.totalBeads > 0 THEN p.totalPrice / p.totalBeads              WHEN p.productType = 'BRACELET' AND p.quantity > 0 THEN p.totalPrice / p.quantity              WHEN p.productType = 'ACCESSORIES' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              WHEN p.productType = 'FINISHED' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              ELSE NULL            END as calculated_price          FROM purchases p          WHERE p.status IN ('ACTIVE', 'PENDING')             AND p.totalPrice IS NOT NULL             AND p.totalPrice > 0            AND (              (p.productType = 'LOOSE_BEADS' AND p.totalBeads IS NOT NULL AND p.totalBeads > 0) OR              (p.productType = 'BRACELET' AND p.quantity IS NOT NULL AND p.quantity > 0) OR              (p.productType = 'ACCESSORIES' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0) OR              (p.productType = 'FINISHED' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0)            )            ${productTypeCondition}        ) as price_data
    Á¨¨1776Ë°å: p.productType as product_type,
    Á¨¨1802Ë°å: (p.productType IN ('LOOSE_BEADS', 'BRACELET') AND (p.totalBeads IS NOT NULL AND p.totalBeads > 0 OR p.pieceCount IS NOT NULL AND p.pieceCount > 0)) OR
    Á¨¨1803Ë°å: (p.productType = 'ACCESSORIES' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0) OR
    Á¨¨1804Ë°å: (p.productType = 'FINISHED' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0)
    Á¨¨1807Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification,


üìÅ Êñá‰ª∂: backend/src/routes/inventory.ts.backup_20250913_130344
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_types (6 Â§Ñ)
    Á¨¨17Ë°å: product_types: z.union([
    Á¨¨43Ë°å: product_types: z.union([
    Á¨¨233Ë°å: product_types,
    Á¨¨252Ë°å: product_types,
    Á¨¨354Ë°å: if (product_types) {
    Á¨¨355Ë°å: const productTypesArray = Array.isArray(product_types) ? product_types : [product_types]

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_type (34 Â§Ñ)
    Á¨¨28Ë°å: sort_by: z.enum(['total_quantity', 'product_type', 'crystal_type']).optional()
    Á¨¨63Ë°å: product_type: true,
    Á¨¨264Ë°å: p.productType as product_type,
    Á¨¨345Ë°å: const productType = item.product_type
    Á¨¨380Ë°å: product_type: productType,
    Á¨¨442Ë°å: product_type: item.product_type,
    Á¨¨512Ë°å: product_type: level1.product_type,
    Á¨¨521Ë°å: const sortField = sort_by === 'product_type' ? 'product_type' : 'total_quantity'
    Á¨¨523Ë°å: if (sortField === 'product_type') {
    Á¨¨524Ë°å: return sort === 'asc' ? a.product_type.localeCompare(b.product_type) : b.product_type.localeCompare(a.product_type)
    Á¨¨1340Ë°å: p.productType as product_type,
    Á¨¨1426Ë°å: const { product_type, limit = 20 } = req.query
    Á¨¨1430Ë°å: if (product_type && product_type !== 'ALL') {
    Á¨¨1431Ë°å: whereClause = `WHERE p.productType = '${product_type}'`
    Á¨¨1438Ë°å: p.productType as product_type,
    Á¨¨1579Ë°å: p.productType as product_type,
    Á¨¨1678Ë°å: product_type = 'LOOSE_BEADS',
    Á¨¨1684Ë°å: product_type,
    Á¨¨1693Ë°å: if (product_type && product_type !== 'ALL') {
    Á¨¨1694Ë°å: productTypeCondition = `AND p.productType = '${product_type}'`
    Á¨¨1704Ë°å: WHEN product_type = 'FINISHED' AND calculated_price >= 0 AND calculated_price <= 50 THEN '0-50ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1705Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 50 AND calculated_price <= 100 THEN '50-100ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1706Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 100 AND calculated_price <= 200 THEN '100-200ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1707Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 200 AND calculated_price <= 500 THEN '200-500ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1708Ë°å: WHEN product_type = 'FINISHED' AND calculated_price > 500 THEN '500ÂÖÉ‰ª•‰∏ä'
    Á¨¨1710Ë°å: WHEN product_type != 'FINISHED' AND calculated_price >= 0 AND calculated_price <= 3 THEN '0-3ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1711Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 3 AND calculated_price <= 10 THEN '3-10ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1712Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 10 AND calculated_price <= 20 THEN '10-20ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1713Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 20 AND calculated_price <= 50 THEN '20-50ÂÖÉÔºàÂê´Ôºâ'
    Á¨¨1714Ë°å: WHEN product_type != 'FINISHED' AND calculated_price > 50 THEN '50ÂÖÉ‰ª•‰∏ä'
    Á¨¨1718Ë°å: FROM (          SELECT             p.productType as product_type,            CASE               WHEN p.productType = 'LOOSE_BEADS' AND p.totalBeads > 0 THEN p.totalPrice / p.totalBeads              WHEN p.productType = 'BRACELET' AND p.quantity > 0 THEN p.totalPrice / p.quantity              WHEN p.productType = 'ACCESSORIES' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              WHEN p.productType = 'FINISHED' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              ELSE NULL            END as calculated_price          FROM purchases p          WHERE p.status IN ('ACTIVE', 'PENDING')             AND p.totalPrice IS NOT NULL             AND p.totalPrice > 0            AND (              (p.productType = 'LOOSE_BEADS' AND p.totalBeads IS NOT NULL AND p.totalBeads > 0) OR              (p.productType = 'BRACELET' AND p.quantity IS NOT NULL AND p.quantity > 0) OR              (p.productType = 'ACCESSORIES' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0) OR              (p.productType = 'FINISHED' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0)            )            ${productTypeCondition}        ) as price_data
    Á¨¨1749Ë°å: product_type,
    Á¨¨1776Ë°å: p.productType as product_type,
    Á¨¨1848Ë°å: product_type,

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (25 Â§Ñ)
    Á¨¨62Ë°å: product_name: true,
    Á¨¨263Ë°å: p.productName as product_name,
    Á¨¨351Ë°å: if (search && !item.product_name.toLowerCase().includes(search.toLowerCase())) return
    Á¨¨441Ë°å: product_name: item.product_name,
    Á¨¨575Ë°å: sort_by = 'product_name'
    Á¨¨614Ë°å: p.productName as product_name,
    Á¨¨646Ë°å: ORDER BY ${sort_by === 'product_name' ? 'p.productName' : 'total_remaining_beads'} ${sort === 'asc' ? 'ASC' : 'DESC'}
    Á¨¨722Ë°å: const purchases = await prisma.$queryRawUnsafe(purchaseQuery, group.product_name) as any[]
    Á¨¨723Ë°å: console.log(`üîç [ÈááË¥≠ËÆ∞ÂΩïÊü•ËØ¢] ‰∫ßÂìÅ"${group.product_name}"ÁöÑÈááË¥≠ËÆ∞ÂΩï:`, purchases)
    Á¨¨807Ë°å: console.log(`‚úÖ [Âèò‰ΩìÂêàÂπ∂] ‰∫ßÂìÅ"${group.product_name}"ÂêàÂπ∂ÂêéÁöÑÂèò‰Ωì:`, {
    Á¨¨819Ë°å: product_name: group.product_name,
    Á¨¨922Ë°å: const validSortFields = ['purchase_date', 'created_at', 'remaining_beads', 'product_name']
    Á¨¨931Ë°å: p.productName as product_name,
    Á¨¨1025Ë°å: p.productName as product_name,
    Á¨¨1090Ë°å: sort_by: z.enum(['purchase_date', 'product_name', 'specification', 'remaining_quantity']).optional()
    Á¨¨1158Ë°å: if (sort_by === 'product_name') {
    Á¨¨1171Ë°å: p.productName as product_name,
    Á¨¨1292Ë°å: product_name: item.product_name,
    Á¨¨1298Ë°å: product_name: item.product_name,
    Á¨¨1437Ë°å: p.productName as product_name,
    Á¨¨1491Ë°å: name: item.product_name,
    Á¨¨1578Ë°å: p.productName as product_name,
    Á¨¨1775Ë°å: p.productName as product_name,
    Á¨¨1899Ë°å: p.productName as product_name,
    Á¨¨1969Ë°å: p.productName as product_name,

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: productName (37 Â§Ñ)
    Á¨¨96Ë°å: const parseProductClassification = (productName: string) => {
    Á¨¨143Ë°å: if (keywords.some(keyword => productName.includes(keyword))) {
    Á¨¨151Ë°å: if (keywords.some(keyword => productName.includes(keyword))) {
    Á¨¨158Ë°å: if (productName.includes('ÈöèÂΩ¢')) {
    Á¨¨263Ë°å: p.productName as product_name,
    Á¨¨330Ë°å: ORDER BY p.productType, p.productName,
    Á¨¨587Ë°å: whereClause += ' AND p.productName LIKE ?'
    Á¨¨614Ë°å: p.productName as product_name,
    Á¨¨645Ë°å: GROUP BY p.productName
    Á¨¨646Ë°å: ORDER BY ${sort_by === 'product_name' ? 'p.productName' : 'total_remaining_beads'} ${sort === 'asc' ? 'ASC' : 'DESC'}
    Á¨¨652Ë°å: SELECT COUNT(DISTINCT p.productName) as total
    Á¨¨718Ë°å: WHERE p.beadDiameter IS NOT NULL AND p.productName = ?
    Á¨¨898Ë°å: whereClause += ' AND p.productName LIKE ?'
    Á¨¨931Ë°å: p.productName as product_name,
    Á¨¨932Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨957Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨1025Ë°å: p.productName as product_name,
    Á¨¨1026Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨1043Ë°å: AND (p.productName LIKE ? OR s.name LIKE ?)
    Á¨¨1044Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨1135Ë°å: whereConditions.push('(p.productName LIKE ? OR s.name LIKE ?)')
    Á¨¨1159Ë°å: orderBy = `p.productName ${sort === 'asc' ? 'ASC' : 'DESC'}`
    Á¨¨1171Ë°å: p.productName as product_name,
    Á¨¨1437Ë°å: p.productName as product_name,
    Á¨¨1453Ë°å: GROUP BY p.productName, p.productType
    Á¨¨1578Ë°å: p.productName as product_name,
    Á¨¨1614Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification, p.quality, s.name
    Á¨¨1775Ë°å: p.productName as product_name,
    Á¨¨1807Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification,
    Á¨¨1899Ë°å: p.productName as product_name,
    Á¨¨1900Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨1929Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨1969Ë°å: p.productName as product_name,
    Á¨¨1970Ë°å: CONCAT(p.productName, ' ', p.beadDiameter, 'mm ', COALESCE(p.quality, ''), 'Á∫ß') as bead_type,
    Á¨¨1980Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,
    Á¨¨2025Ë°å: p.productName as '‰∫ßÂìÅÂêçÁß∞',
    Á¨¨2057Ë°å: GROUP BY p.id, p.productName, p.beadDiameter, p.quality, p.minStockAlert,

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: productType (78 Â§Ñ)
    Á¨¨264Ë°å: p.productType as product_type,
    Á¨¨271Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨272Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.totalBeads, p.pieceCount, 0)
    Á¨¨273Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨274Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨279Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨280Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.totalBeads, p.pieceCount, 0)
    Á¨¨281Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨282Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨287Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨288Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.totalBeads, p.pieceCount, 0)
    Á¨¨289Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨290Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨295Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN p.pricePerBead
    Á¨¨296Ë°å: WHEN p.productType = 'BRACELET' THEN
    Á¨¨303Ë°å: WHEN p.productType = 'ACCESSORIES' THEN
    Á¨¨310Ë°å: WHEN p.productType = 'FINISHED' THEN
    Á¨¨330Ë°å: ORDER BY p.productType, p.productName,
    Á¨¨345Ë°å: const productType = item.product_type
    Á¨¨356Ë°å: if (!productTypesArray.includes(productType)) return
    Á¨¨373Ë°å: const level1Key = productType
    Á¨¨374Ë°å: const level2Key = `${productType}|${specValue}${specUnit}`
    Á¨¨375Ë°å: const level3Key = `${productType}|${specValue}${specUnit}|${quality}`
    Á¨¨380Ë°å: product_type: productType,
    Á¨¨597Ë°å: whereClause += ' AND (CASE WHEN p.productType = "LOOSE_BEADS" THEN COALESCE(p.pieceCount, 0) WHEN p.productType = "BRACELET" THEN COALESCE(p.quantity, 0) WHEN p.productType = "ACCESSORIES" THEN COALESCE(p.pieceCount, 0) WHEN p.productType = "FINISHED" THEN COALESCE(p.pieceCount, 0) ELSE COALESCE(p.quantity, 0) END - COALESCE(mu.used_beads, 0)) <= p.minStockAlert'
    Á¨¨622Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨623Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨624Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨625Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨631Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨632Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨633Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨634Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨684Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨685Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨686Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨687Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨692Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨693Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨694Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨695Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨700Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN COALESCE(p.pieceCount, 0)
    Á¨¨701Ë°å: WHEN p.productType = 'BRACELET' THEN COALESCE(p.quantity, 0)
    Á¨¨702Ë°å: WHEN p.productType = 'ACCESSORIES' THEN COALESCE(p.pieceCount, 0)
    Á¨¨703Ë°å: WHEN p.productType = 'FINISHED' THEN COALESCE(p.pieceCount, 0)
    Á¨¨1130Ë°å: let whereConditions = ['p.productType = "FINISHED"']
    Á¨¨1179Ë°å: WHEN p.productType = 'FINISHED' AND p.pieceCount > 0 AND p.totalPrice IS NOT NULL
    Á¨¨1340Ë°å: p.productType as product_type,
    Á¨¨1343Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1344Ë°å: WHEN p.productType = 'BRACELET' THEN (p.totalBeads - COALESCE(mu.used_quantity, 0))
    Á¨¨1345Ë°å: WHEN p.productType = 'ACCESSORIES' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1346Ë°å: WHEN p.productType = 'FINISHED' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1355Ë°å: GROUP BY p.productType
    Á¨¨1356Ë°å: ORDER BY p.productType
    Á¨¨1431Ë°å: whereClause = `WHERE p.productType = '${product_type}'`
    Á¨¨1438Ë°å: p.productType as product_type,
    Á¨¨1440Ë°å: WHEN p.productType = 'LOOSE_BEADS' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1441Ë°å: WHEN p.productType = 'BRACELET' THEN (p.totalBeads - COALESCE(mu.used_quantity, 0))
    Á¨¨1442Ë°å: WHEN p.productType = 'ACCESSORIES' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1443Ë°å: WHEN p.productType = 'FINISHED' THEN (p.pieceCount - COALESCE(mu.used_quantity, 0))
    Á¨¨1453Ë°å: GROUP BY p.productName, p.productType
    Á¨¨1579Ë°å: p.productType as product_type,
    Á¨¨1586Ë°å: WHEN p.productType IN ('LOOSE_BEADS', 'BRACELET') THEN mu.quantityUsedBeads
    Á¨¨1587Ë°å: WHEN p.productType IN ('ACCESSORIES', 'FINISHED') THEN mu.quantityUsedPieces
    Á¨¨1594Ë°å: WHEN p.productType IN ('LOOSE_BEADS', 'BRACELET') THEN mu.quantityUsedBeads
    Á¨¨1595Ë°å: WHEN p.productType IN ('ACCESSORIES', 'FINISHED') THEN mu.quantityUsedPieces
    Á¨¨1602Ë°å: WHEN p.productType IN ('LOOSE_BEADS', 'BRACELET') THEN 'È¢ó'
    Á¨¨1603Ë°å: WHEN p.productType IN ('ACCESSORIES', 'FINISHED') THEN '‰ª∂'
    Á¨¨1611Ë°å: (p.productType IN ('LOOSE_BEADS', 'BRACELET') AND mu.quantityUsedBeads > 0) OR
    Á¨¨1612Ë°å: (p.productType IN ('ACCESSORIES', 'FINISHED') AND mu.quantityUsedPieces > 0)
    Á¨¨1614Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification, p.quality, s.name
    Á¨¨1694Ë°å: productTypeCondition = `AND p.productType = '${product_type}'`
    Á¨¨1718Ë°å: FROM (          SELECT             p.productType as product_type,            CASE               WHEN p.productType = 'LOOSE_BEADS' AND p.totalBeads > 0 THEN p.totalPrice / p.totalBeads              WHEN p.productType = 'BRACELET' AND p.quantity > 0 THEN p.totalPrice / p.quantity              WHEN p.productType = 'ACCESSORIES' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              WHEN p.productType = 'FINISHED' AND p.pieceCount > 0 THEN p.totalPrice / p.pieceCount              ELSE NULL            END as calculated_price          FROM purchases p          WHERE p.status IN ('ACTIVE', 'PENDING')             AND p.totalPrice IS NOT NULL             AND p.totalPrice > 0            AND (              (p.productType = 'LOOSE_BEADS' AND p.totalBeads IS NOT NULL AND p.totalBeads > 0) OR              (p.productType = 'BRACELET' AND p.quantity IS NOT NULL AND p.quantity > 0) OR              (p.productType = 'ACCESSORIES' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0) OR              (p.productType = 'FINISHED' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0)            )            ${productTypeCondition}        ) as price_data
    Á¨¨1776Ë°å: p.productType as product_type,
    Á¨¨1802Ë°å: (p.productType IN ('LOOSE_BEADS', 'BRACELET') AND (p.totalBeads IS NOT NULL AND p.totalBeads > 0 OR p.pieceCount IS NOT NULL AND p.pieceCount > 0)) OR
    Á¨¨1803Ë°å: (p.productType = 'ACCESSORIES' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0) OR
    Á¨¨1804Ë°å: (p.productType = 'FINISHED' AND p.pieceCount IS NOT NULL AND p.pieceCount > 0)
    Á¨¨1807Ë°å: GROUP BY p.id, p.productName, p.productType, p.beadDiameter, p.specification,


üìÅ Êñá‰ª∂: src/pages/InventoryList.tsx
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_types (1 Â§Ñ)
    Á¨¨37Ë°å: product_types: selectedProductTypes.length > 0 ? selectedProductTypes: undefined,


üìÅ Êñá‰ª∂: src/pages/ProductEntry.tsx
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_types (5 Â§Ñ)
    Á¨¨388Ë°å: let material_types: string[] = []
    Á¨¨391Ë°å: material_types = ['FINISHED_MATERIAL']
    Á¨¨394Ë°å: material_types = ['LOOSE_BEADS', 'BRACELET', 'ACCESSORIES']
    Á¨¨397Ë°å: console.log('üîç [ÂéüÊùêÊñôÁ≠õÈÄâ] Âà∂‰ΩúÊ®°Âºè:', formData.mode, 'Á≠õÈÄâÁ±ªÂûã:', material_types)
    Á¨¨403Ë°å: purchase_types: material_types


üìÅ Êñá‰ª∂: src/components/InventoryDashboard.tsx
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_type (3 Â§Ñ)
    Á¨¨28Ë°å: material_type: string
    Á¨¨36Ë°å: material_type: string
    Á¨¨46Ë°å: material_type: string

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (1 Â§Ñ)
    Á¨¨45Ë°å: product_name: string


üìÅ Êñá‰ª∂: src/components/InventoryConsumptionChart.tsx
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (5 Â§Ñ)
    Á¨¨21Ë°å: product_name: string
    Á¨¨76Ë°å: name: item.product_name.length > 8 ? `${item.product_name.slice(0, 8)}...` : item.product_name,
    Á¨¨77Ë°å: fullName: item.product_name,
    Á¨¨245Ë°å: <div className="font-medium text-gray-900 text-mobile-body">{item.product_name}</div>
    Á¨¨329Ë°å: <div className="font-medium">{item.product_name}</div>

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_type (1 Â§Ñ)
    Á¨¨22Ë°å: material_type: string


üìÅ Êñá‰ª∂: src/components/ProductPriceDistributionChart.tsx
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_type (8 Â§Ñ)
    Á¨¨39Ë°å: material_type: string
    Á¨¨56Ë°å: material_type: string
    Á¨¨81Ë°å: const [material_type, setMaterial_type] = useState<string>('LOOSE_BEADS')
    Á¨¨88Ë°å: purchase_type: material_type as 'LOOSE_BEADS' | 'BRACELET' | 'ACCESSORIES' | 'FINISHED_MATERIAL' | 'ALL',
    Á¨¨111Ë°å: }, [material_type, priceType])
    Á¨¨136Ë°å: <p className="text-sm text-gray-600">‰∫ßÂìÅÁ±ªÂûãÔºö{PRODUCT_TYPE_MAP[material_type as keyof typeof PRODUCT_TYPE_MAP]}</p>
    Á¨¨150Ë°å: <p className="text-sm text-gray-600">Á±ªÂûãÔºö{PRODUCT_TYPE_MAP[data.material_type as keyof typeof PRODUCT_TYPE_MAP]}</p>
    Á¨¨250Ë°å: material_type === key

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (3 Â§Ñ)
    Á¨¨55Ë°å: product_name: string
    Á¨¨149Ë°å: <p className="font-medium text-gray-900">{data.product_name || data.name}</p>
    Á¨¨225Ë°å: name: item.product_name,


üìÅ Êñá‰ª∂: src/components/ProductDistributionPieChart.tsx
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_type (3 Â§Ñ)
    Á¨¨41Ë°å: const fetch_material_distribution = async (material_type: MaterialType) => {
    Á¨¨45Ë°å: purchase_type: material_type,
    Á¨¨52Ë°å: name: item.material_type || 'Êú™Áü•Á±ªÂûã',


üìÅ Êñá‰ª∂: src/types/index.ts
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_name (3 Â§Ñ)
    Á¨¨175Ë°å: material_name: string
    Á¨¨653Ë°å: material_name: string
    Á¨¨1037Ë°å: material_name: string // ÊàêÂìÅÂêçÁß∞ÔºàÂà´ÂêçÔºâ

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (2 Â§Ñ)
    Á¨¨1021Ë°å: product_name: string // ‰∫ßÂìÅÂêçÁß∞
    Á¨¨1029Ë°å: product_name: string // ÊàêÂìÅÂêçÁß∞


üìÅ Êñá‰ª∂: src/utils/fieldConverter.ts
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_name (2 Â§Ñ)
    Á¨¨169Ë°å: material_name: 'material_name', // ÂéüÊùêÊñôÂêçÁß∞
    Á¨¨186Ë°å: product_name: 'material_name', // ‰øÆÊîπÔºöÁªü‰∏ÄÊò†Â∞ÑÂà∞materialNameÔºàÊ¶ÇÂøµÁªü‰∏ÄÔºâ

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_type (1 Â§Ñ)
    Á¨¨170Ë°å: material_type: 'material_type', // ÂéüÊùêÊñôÁ±ªÂûãÔºàÊï£Áè†material„ÄÅÊâã‰∏≤material„ÄÅÈ•∞ÂìÅÈÖç‰ª∂material„ÄÅÊàêÂìÅmaterialÔºâ

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (1 Â§Ñ)
    Á¨¨186Ë°å: product_name: 'material_name', // ‰øÆÊîπÔºöÁªü‰∏ÄÊò†Â∞ÑÂà∞materialNameÔºàÊ¶ÇÂøµÁªü‰∏ÄÔºâ

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_types (1 Â§Ñ)
    Á¨¨191Ë°å: product_types: 'material_types', // ÂÖºÂÆπÔºöproduct_types -> material_types

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_types (1 Â§Ñ)
    Á¨¨191Ë°å: product_types: 'material_types', // ÂÖºÂÆπÔºöproduct_types -> material_types


üìÅ Êñá‰ª∂: src/utils/pinyinSort.ts
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_type (2 Â§Ñ)
    Á¨¨109Ë°å: const typeA = type_order.indexOf(a.material_type || a.material_type) // ÂÖºÂÆπÂ§ÑÁêÜ
    Á¨¨110Ë°å: const typeB = type_order.indexOf(b.material_type || b.material_type) // ÂÖºÂÆπÂ§ÑÁêÜ

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (2 Â§Ñ)
    Á¨¨117Ë°å: const material_name_a = a.material_name || a.product_name || a.purchase_name || '' // ÂÖºÂÆπÂ§ÑÁêÜ
    Á¨¨118Ë°å: const material_name_b = b.material_name || b.product_name || b.purchase_name || '' // ÂÖºÂÆπÂ§ÑÁêÜ

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_name (2 Â§Ñ)
    Á¨¨117Ë°å: const material_name_a = a.material_name || a.product_name || a.purchase_name || '' // ÂÖºÂÆπÂ§ÑÁêÜ
    Á¨¨118Ë°å: const material_name_b = b.material_name || b.product_name || b.purchase_name || '' // ÂÖºÂÆπÂ§ÑÁêÜ


üìÅ Êñá‰ª∂: src/pages/__tests__/InventoryList.test.tsx
------------------------------------------------------------
  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: material_type (3 Â§Ñ)
    Á¨¨46Ë°å: material_type: 'Êâã‰∏≤',
    Á¨¨64Ë°å: material_type: 'È°πÈìæ',
    Á¨¨215Ë°å: material_type: 'Êâã‰∏≤'

  ‚ùå Â∫üÂºÉÂ≠óÊÆµ: product_name (2 Â§Ñ)
    Á¨¨50Ë°å: product_name: 'Á¥´Ê∞¥Êô∂Êâã‰∏≤',
    Á¨¨68Ë°å: product_name: 'Áé´Áë∞Áü≥Ëã±È°πÈìæ',


üîß ‰øÆÂ§çÂª∫ËÆÆ:
----------------------------------------
1. product_types ‚Üí purchase_types
2. product_type ‚Üí purchase_type
3. product_name ‚Üí purchase_name
4. material_types ‚Üí purchase_types
5. material_type ‚Üí purchase_type
6. material_name ‚Üí purchase_name
7. productType ‚Üí purchase_type
8. productName ‚Üí purchase_name
9. materialType ‚Üí purchase_type
10. materialName ‚Üí purchase_name

‚ö†Ô∏è  Ê≥®ÊÑè: material_usage Áõ∏ÂÖ≥Â≠óÊÆµÂ∫î‰øùÊåÅ‰∏çÂèò

üéØ ÈáçÁÇπÂÖ≥Ê≥® 'product_types is not defined' ÈîôËØØ:
--------------------------------------------------
‰ª•‰∏ãÊñá‰ª∂‰∏≠ÂèëÁé∞ product_types Â≠óÊÆµÔºåÂèØËÉΩÊòØÈîôËØØÊ†πÊ∫ê:
  - backend/src/routes/inventory.ts
  - backend/src/routes/inventory.ts.backup_20250913_130937
  - backend/src/routes/inventory.ts.backup_20250913_130344
  - src/pages/InventoryList.tsx
  - src/utils/fieldConverter.ts