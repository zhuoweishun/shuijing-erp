{
  "timestamp": "2025-09-12T18:10:48.195359",
  "files_processed": 97,
  "files_modified": 19,
  "total_fixes": 180,
  "fix_details": [
    {
      "file": "src\\utils\\format.ts",
      "fixes_count": 1,
      "fixes": [
        {
          "line": 103,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const diff_in_seconds = Math.floor((now.get_time() - date.get_time()) / 1000);",
          "after": "const diff_in_seconds = Math.floor((now.getTime() - date.getTime()) / 1000);"
        }
      ]
    },
    {
      "file": "src\\components\\CustomerDetailModal.tsx",
      "fixes_count": 2,
      "fixes": [
        {
          "line": 249,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "return Math.floor((now.get_time() - last_purchase.get_time()) / (1000 * 60 * 60 * 24))",
          "after": "return Math.floor((now.getTime() - last_purchase.getTime()) / (1000 * 60 * 60 * 24))"
        },
        {
          "line": 283,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const days_since_last_purchase = Math.floor((now.get_time() - last_purchase.get_time()) / (1000 * 60 * 60 * 24));",
          "after": "const days_since_last_purchase = Math.floor((now.getTime() - last_purchase.getTime()) / (1000 * 60 * 60 * 24));"
        }
      ]
    },
    {
      "file": "src\\components\\SkuHistoryView.tsx",
      "fixes_count": 6,
      "fixes": [
        {
          "line": 162,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "start_date = new Date(now.get_full_year(), now.get_month(), now.get_date());",
          "after": "start_date = new Date(now.getFullYear(), now.get_month(), now.get_date());"
        },
        {
          "line": 162,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "start_date = new Date(now.getFullYear(), now.get_month(), now.get_date());",
          "after": "start_date = new Date(now.getFullYear(), now.getMonth(), now.get_date());"
        },
        {
          "line": 162,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "start_date = new Date(now.getFullYear(), now.getMonth(), now.get_date());",
          "after": "start_date = new Date(now.getFullYear(), now.getMonth(), now.getDate());"
        },
        {
          "line": 165,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "start_date = new Date(now.get_time() - 7 * 24 * 60 * 60 * 1000);",
          "after": "start_date = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);"
        },
        {
          "line": 168,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "start_date = new Date(now.get_full_year(), now.get_month(), 1);",
          "after": "start_date = new Date(now.getFullYear(), now.get_month(), 1);"
        },
        {
          "line": 168,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "start_date = new Date(now.getFullYear(), now.get_month(), 1);",
          "after": "start_date = new Date(now.getFullYear(), now.getMonth(), 1);"
        }
      ]
    },
    {
      "file": "src\\pages\\CustomerManagement.tsx",
      "fixes_count": 2,
      "fixes": [
        {
          "line": 229,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "return Math.floor((now.get_time() - last_purchase.get_time()) / (1000 * 60 * 60 * 24))",
          "after": "return Math.floor((now.getTime() - last_purchase.getTime()) / (1000 * 60 * 60 * 24))"
        },
        {
          "line": 263,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const days_since_last_purchase = Math.floor((now.get_time() - last_purchase.get_time()) / (1000 * 60 * 60 * 24));",
          "after": "const days_since_last_purchase = Math.floor((now.getTime() - last_purchase.getTime()) / (1000 * 60 * 60 * 24));"
        }
      ]
    },
    {
      "file": "backend\\src\\middleware\\auth.ts",
      "fixes_count": 1,
      "fixes": [
        {
          "line": 41,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const user = await prisma.user.find_unique({",
          "after": "const user = await prisma.user.findUnique({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\auth.ts",
      "fixes_count": 2,
      "fixes": [
        {
          "line": 31,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const user = await prisma.user.find_unique({",
          "after": "const user = await prisma.user.findUnique({"
        },
        {
          "line": 145,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const user = await prisma.user.find_unique({",
          "after": "const user = await prisma.user.findUnique({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\customers.ts",
      "fixes_count": 24,
      "fixes": [
        {
          "line": 85,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "gte: new Date(now.get_time() - 7 * 24 * 60 * 60 * 1000)",
          "after": "gte: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 92,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "gte: new Date(now.get_time() - 30 * 24 * 60 * 60 * 1000)",
          "after": "gte: new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 99,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "gte: new Date(now.get_time() - 180 * 24 * 60 * 60 * 1000)",
          "after": "gte: new Date(now.getTime() - 180 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 106,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "gte: new Date(now.get_time() - 365 * 24 * 60 * 60 * 1000)",
          "after": "gte: new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 180,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.customer_purchase.find_many({",
          "after": "prisma.customer_purchase.findMany({"
        },
        {
          "line": 270,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.customer.find_many({",
          "after": "prisma.customer.findMany({"
        },
        {
          "line": 315,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.product_sku.find_many({",
          "after": "prisma.product_sku.findMany({"
        },
        {
          "line": 549,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.customer.find_many({",
          "after": "prisma.customer.findMany({"
        },
        {
          "line": 617,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.to_lower_case\\b",
          "before": "customer.customer_code.to_lower_case().includes(codeSearch)",
          "after": "customer.customer_code.toLowerCase().includes(codeSearch)"
        },
        {
          "line": 678,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const allCustomers = await prisma.customer.find_many({",
          "after": "const allCustomers = await prisma.customer.findMany({"
        },
        {
          "line": 735,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const customer = await prisma.customer.find_unique({",
          "after": "const customer = await prisma.customer.findUnique({"
        },
        {
          "line": 806,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingCustomer = await prisma.customer.find_unique({",
          "after": "const existingCustomer = await prisma.customer.findUnique({"
        },
        {
          "line": 879,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingCustomer = await prisma.customer.find_unique({",
          "after": "const existingCustomer = await prisma.customer.findUnique({"
        },
        {
          "line": 892,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const phoneExists = await prisma.customer.find_unique({",
          "after": "const phoneExists = await prisma.customer.findUnique({"
        },
        {
          "line": 943,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const customer = await prisma.customer.find_unique({",
          "after": "const customer = await prisma.customer.findUnique({"
        },
        {
          "line": 986,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const customer = await prisma.customer.find_unique({",
          "after": "const customer = await prisma.customer.findUnique({"
        },
        {
          "line": 998,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.customer_purchase.find_many({",
          "after": "prisma.customer_purchase.findMany({"
        },
        {
          "line": 1078,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const customer = await prisma.customer.find_unique({",
          "after": "const customer = await prisma.customer.findUnique({"
        },
        {
          "line": 1090,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await prisma.product_sku.find_unique({",
          "after": "const sku = await prisma.product_sku.findUnique({"
        },
        {
          "line": 1132,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const customer = await prisma.customer.find_unique({",
          "after": "const customer = await prisma.customer.findUnique({"
        },
        {
          "line": 1143,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const notes = await prisma.customer_note.find_many({",
          "after": "const notes = await prisma.customer_note.findMany({"
        },
        {
          "line": 1184,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const customer = await prisma.customer.find_unique({",
          "after": "const customer = await prisma.customer.findUnique({"
        },
        {
          "line": 1243,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const customer = await tx.customer.find_unique({",
          "after": "const customer = await tx.customer.findUnique({"
        },
        {
          "line": 1252,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await tx.customer_purchase.find_unique({",
          "after": "const purchase = await tx.customer_purchase.findUnique({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\dashboard.ts",
      "fixes_count": 3,
      "fixes": [
        {
          "line": 57,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const recentPurchasesData = await prisma.purchase.find_many({",
          "after": "const recentPurchasesData = await prisma.purchase.findMany({"
        },
        {
          "line": 81,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const recentMaterialsData = await prisma.material.find_many({",
          "after": "const recentMaterialsData = await prisma.material.findMany({"
        },
        {
          "line": 111,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const supplierStatsData = await prisma.supplier.find_many({",
          "after": "const supplierStatsData = await prisma.supplier.findMany({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\financial.ts",
      "fixes_count": 63,
      "fixes": [
        {
          "line": 49,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        },
        {
          "line": 60,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const skuCreations = await prisma.product_sku.find_many({",
          "after": "const skuCreations = await prisma.product_sku.findMany({"
        },
        {
          "line": 70,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const restockLogs = await prisma.sku_inventory_log.find_many({",
          "after": "const restockLogs = await prisma.sku_inventory_log.findMany({"
        },
        {
          "line": 87,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const financial_records = await prisma.financial_record.find_many({",
          "after": "const financial_records = await prisma.financial_record.findMany({"
        },
        {
          "line": 100,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const customerPurchases = await prisma.customer_purchase.find_many({",
          "after": "const customerPurchases = await prisma.customer_purchase.findMany({"
        },
        {
          "line": 261,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        },
        {
          "line": 272,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const skuCreations = await prisma.product_sku.find_many({",
          "after": "const skuCreations = await prisma.product_sku.findMany({"
        },
        {
          "line": 282,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const restockLogs = await prisma.sku_inventory_log.find_many({",
          "after": "const restockLogs = await prisma.sku_inventory_log.findMany({"
        },
        {
          "line": 299,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const financial_records = await prisma.financial_record.find_many({",
          "after": "const financial_records = await prisma.financial_record.findMany({"
        },
        {
          "line": 306,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const customerPurchases = await prisma.customer_purchase.find_many({",
          "after": "const customerPurchases = await prisma.customer_purchase.findMany({"
        },
        {
          "line": 574,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "start_date = new Date(end_date.get_full_year(), 0, 1)",
          "after": "start_date = new Date(end_date.getFullYear(), 0, 1)"
        },
        {
          "line": 576,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "start_date = new Date(end_date.get_full_year(), end_date.get_month(), 1)",
          "after": "start_date = new Date(end_date.getFullYear(), end_date.get_month(), 1)"
        },
        {
          "line": 576,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "start_date = new Date(end_date.getFullYear(), end_date.get_month(), 1)",
          "after": "start_date = new Date(end_date.getFullYear(), end_date.getMonth(), 1)"
        },
        {
          "line": 593,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const productionCosts = await prisma.product_sku.find_many({",
          "after": "const productionCosts = await prisma.product_sku.findMany({"
        },
        {
          "line": 636,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "const startOfMonth = new Date(now.get_full_year(), now.get_month(), 1)",
          "after": "const startOfMonth = new Date(now.getFullYear(), now.get_month(), 1)"
        },
        {
          "line": 636,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "const startOfMonth = new Date(now.getFullYear(), now.get_month(), 1)",
          "after": "const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)"
        },
        {
          "line": 637,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "const startOfYear = new Date(now.get_full_year(), 0, 1)",
          "after": "const startOfYear = new Date(now.getFullYear(), 0, 1)"
        },
        {
          "line": 664,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const monthlyProductionCosts = await prisma.product_sku.find_many({",
          "after": "const monthlyProductionCosts = await prisma.product_sku.findMany({"
        },
        {
          "line": 678,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const yearlyProductionCosts = await prisma.product_sku.find_many({",
          "after": "const yearlyProductionCosts = await prisma.product_sku.findMany({"
        },
        {
          "line": 774,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "const startOfToday = new Date(now.get_full_year(), now.get_month(), now.get_date())",
          "after": "const startOfToday = new Date(now.getFullYear(), now.get_month(), now.get_date())"
        },
        {
          "line": 774,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "const startOfToday = new Date(now.getFullYear(), now.get_month(), now.get_date())",
          "after": "const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.get_date())"
        },
        {
          "line": 774,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.get_date())",
          "after": "const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate())"
        },
        {
          "line": 856,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const start_date = query.start_date ? new Date(query.start_date) : new Date(end_date.get_time() - 30 * 24 * 60 * 60 * 1000)",
          "after": "const start_date = query.start_date ? new Date(query.start_date) : new Date(end_date.getTime() - 30 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 860,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        },
        {
          "line": 873,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const productionCosts = await prisma.product_sku.find_many({",
          "after": "const productionCosts = await prisma.product_sku.findMany({"
        },
        {
          "line": 889,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const destroyRefunds = await prisma.sku_inventory_log.find_many({",
          "after": "const destroyRefunds = await prisma.sku_inventory_log.findMany({"
        },
        {
          "line": 915,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`"
        },
        {
          "line": 915,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`"
        },
        {
          "line": 917,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 917,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 917,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`"
        },
        {
          "line": 942,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`"
        },
        {
          "line": 942,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`"
        },
        {
          "line": 944,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 944,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 944,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`"
        },
        {
          "line": 972,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`"
        },
        {
          "line": 972,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`"
        },
        {
          "line": 974,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 974,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 974,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`"
        },
        {
          "line": 1041,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const start_date = query.start_date ? new Date(query.start_date) : new Date(end_date.get_time() - 30 * 24 * 60 * 60 * 1000)",
          "after": "const start_date = query.start_date ? new Date(query.start_date) : new Date(end_date.getTime() - 30 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 1045,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        },
        {
          "line": 1058,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const productionCosts = await prisma.product_sku.find_many({",
          "after": "const productionCosts = await prisma.product_sku.findMany({"
        },
        {
          "line": 1074,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const destroyRefunds = await prisma.sku_inventory_log.find_many({",
          "after": "const destroyRefunds = await prisma.sku_inventory_log.findMany({"
        },
        {
          "line": 1100,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`"
        },
        {
          "line": 1100,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`"
        },
        {
          "line": 1102,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 1102,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 1102,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`"
        },
        {
          "line": 1127,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`"
        },
        {
          "line": 1127,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`"
        },
        {
          "line": 1129,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 1129,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 1129,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`"
        },
        {
          "line": 1157,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`"
        },
        {
          "line": 1157,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`"
        },
        {
          "line": 1159,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_full_year\\b",
          "before": "key = `${date.get_full_year()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 1159,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "key = `${date.getFullYear()}-${String(date.get_month() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`"
        },
        {
          "line": 1159,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_date\\b",
          "before": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.get_date()).padStart(2, '0')}`",
          "after": "key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`"
        },
        {
          "line": 1245,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_month\\b",
          "before": "stale_threshold_date.setMonth(stale_threshold_date.get_month() - stale_period_months)",
          "after": "stale_threshold_date.setMonth(stale_threshold_date.getMonth() - stale_period_months)"
        },
        {
          "line": 1248,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const material_inventory = await prisma.purchase.find_many({",
          "after": "const material_inventory = await prisma.purchase.findMany({"
        },
        {
          "line": 1281,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const sku_inventory = await prisma.product_sku.find_many({",
          "after": "const sku_inventory = await prisma.product_sku.findMany({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\inventory.ts",
      "fixes_count": 7,
      "fixes": [
        {
          "line": 58,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const samplePurchases = await prisma.purchase.find_many({",
          "after": "const samplePurchases = await prisma.purchase.findMany({"
        },
        {
          "line": 344,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.to_lower_case\\b",
          "before": "if (search && !item.product_name.to_lower_case().includes(search.to_lower_case())) return",
          "after": "if (search && !item.product_name.toLowerCase().includes(search.toLowerCase())) return"
        },
        {
          "line": 1521,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const sevenDaysAgo = new Date(now.get_time() - 7 * 24 * 60 * 60 * 1000)",
          "after": "const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 1525,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const thirtyDaysAgo = new Date(now.get_time() - 30 * 24 * 60 * 60 * 1000)",
          "after": "const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 1529,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const ninetyDaysAgo = new Date(now.get_time() - 90 * 24 * 60 * 60 * 1000)",
          "after": "const ninetyDaysAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 1533,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const sixMonthsAgo = new Date(now.get_time() - 6 * 30 * 24 * 60 * 60 * 1000)",
          "after": "const sixMonthsAgo = new Date(now.getTime() - 6 * 30 * 24 * 60 * 60 * 1000)"
        },
        {
          "line": 1537,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.get_time\\b",
          "before": "const oneYearAgo = new Date(now.get_time() - 365 * 24 * 60 * 60 * 1000)",
          "after": "const oneYearAgo = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000)"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\materials.ts",
      "fixes_count": 8,
      "fixes": [
        {
          "line": 88,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.material.find_many({",
          "after": "prisma.material.findMany({"
        },
        {
          "line": 147,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const material = await prisma.material.find_unique({",
          "after": "const material = await prisma.material.findUnique({"
        },
        {
          "line": 224,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await prisma.purchase.find_unique({",
          "after": "const purchase = await prisma.purchase.findUnique({"
        },
        {
          "line": 236,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const existingMaterial = await prisma.material.find_first({",
          "after": "const existingMaterial = await prisma.material.findFirst({"
        },
        {
          "line": 254,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existing = await prisma.material.find_unique({",
          "after": "const existing = await prisma.material.findUnique({"
        },
        {
          "line": 353,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingMaterial = await prisma.material.find_unique({",
          "after": "const existingMaterial = await prisma.material.findUnique({"
        },
        {
          "line": 418,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const material = await prisma.material.find_unique({",
          "after": "const material = await prisma.material.findUnique({"
        },
        {
          "line": 447,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.delete_many\\b",
          "before": "await tx.material_usage.delete_many({",
          "after": "await tx.material_usage.deleteMany({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\products.ts",
      "fixes_count": 8,
      "fixes": [
        {
          "line": 261,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const products = await prisma.product.find_many({",
          "after": "const products = await prisma.product.findMany({"
        },
        {
          "line": 330,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const product = await prisma.product.find_unique({",
          "after": "const product = await prisma.product.findUnique({"
        },
        {
          "line": 387,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const product = await tx.product.find_unique({",
          "after": "const product = await tx.product.findUnique({"
        },
        {
          "line": 413,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.delete_many\\b",
          "before": "await tx.material_usage.delete_many({",
          "after": "await tx.material_usage.deleteMany({"
        },
        {
          "line": 464,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await prisma.purchase.find_unique({",
          "after": "const purchase = await prisma.purchase.findUnique({"
        },
        {
          "line": 559,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await tx.purchase.find_unique({",
          "after": "const purchase = await tx.purchase.findUnique({"
        },
        {
          "line": 628,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await tx.purchase.find_unique({",
          "after": "const purchase = await tx.purchase.findUnique({"
        },
        {
          "line": 801,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await tx.purchase.find_unique({",
          "after": "const purchase = await tx.purchase.findUnique({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\purchases.ts",
      "fixes_count": 16,
      "fixes": [
        {
          "line": 33,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        },
        {
          "line": 985,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        },
        {
          "line": 1088,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existing = await prisma.purchase.find_unique({",
          "after": "const existing = await prisma.purchase.findUnique({"
        },
        {
          "line": 1146,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "let supplier = await prisma.supplier.find_first({",
          "after": "let supplier = await prisma.supplier.findFirst({"
        },
        {
          "line": 1245,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await prisma.purchase.find_unique({",
          "after": "const purchase = await prisma.purchase.findUnique({"
        },
        {
          "line": 1330,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingPurchase = await prisma.purchase.find_unique({",
          "after": "const existingPurchase = await prisma.purchase.findUnique({"
        },
        {
          "line": 1382,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "let supplier = await prisma.supplier.find_first({",
          "after": "let supplier = await prisma.supplier.findFirst({"
        },
        {
          "line": 1564,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const user = await prisma.user.find_unique({",
          "after": "const user = await prisma.user.findUnique({"
        },
        {
          "line": 1629,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingPurchase = await prisma.purchase.find_unique({",
          "after": "const existingPurchase = await prisma.purchase.findUnique({"
        },
        {
          "line": 1685,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const user = await prisma.user.find_unique({",
          "after": "const user = await prisma.user.findUnique({"
        },
        {
          "line": 1723,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.delete_many\\b",
          "before": "await tx.financial_record.delete_many({",
          "after": "await tx.financial_record.deleteMany({"
        },
        {
          "line": 1771,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const purchase = await prisma.purchase.find_first({",
          "after": "const purchase = await prisma.purchase.findFirst({"
        },
        {
          "line": 1974,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        },
        {
          "line": 2144,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await prisma.purchase.find_unique({",
          "after": "const purchase = await prisma.purchase.findUnique({"
        },
        {
          "line": 2177,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existing = await prisma.material.find_unique({",
          "after": "const existing = await prisma.material.findUnique({"
        },
        {
          "line": 2273,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const materialWithDetails = await prisma.material.find_unique({",
          "after": "const materialWithDetails = await prisma.material.findUnique({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\skus.ts",
      "fixes_count": 19,
      "fixes": [
        {
          "line": 196,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "let customer = await tx.customer.find_unique({",
          "after": "let customer = await tx.customer.findUnique({"
        },
        {
          "line": 226,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await tx.product_sku.find_unique({",
          "after": "const sku = await tx.product_sku.findUnique({"
        },
        {
          "line": 331,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.sku_inventory_log.find_many({",
          "after": "prisma.sku_inventory_log.findMany({"
        },
        {
          "line": 381,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const lowStockSkus = await prisma.product_sku.find_many({",
          "after": "const lowStockSkus = await prisma.product_sku.findMany({"
        },
        {
          "line": 416,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await prisma.product_sku.find_unique({",
          "after": "const sku = await prisma.product_sku.findUnique({"
        },
        {
          "line": 599,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await prisma.product_sku.find_unique({",
          "after": "const sku = await prisma.product_sku.findUnique({"
        },
        {
          "line": 632,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const firstMaterialUsage = await prisma.materialUsage.find_first({",
          "after": "const firstMaterialUsage = await prisma.materialUsage.findFirst({"
        },
        {
          "line": 795,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await tx.product_sku.find_unique({",
          "after": "const sku = await tx.product_sku.findUnique({"
        },
        {
          "line": 1034,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await prisma.product_sku.find_unique({",
          "after": "const sku = await prisma.product_sku.findUnique({"
        },
        {
          "line": 1086,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const currentMaterialUsage = await prisma.materialUsage.find_first({",
          "after": "const currentMaterialUsage = await prisma.materialUsage.findFirst({"
        },
        {
          "line": 1181,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await tx.product_sku.find_unique({",
          "after": "const sku = await tx.product_sku.findUnique({"
        },
        {
          "line": 1210,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const firstMaterialUsage = await tx.materialUsage.find_first({",
          "after": "const firstMaterialUsage = await tx.materialUsage.findFirst({"
        },
        {
          "line": 1272,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const purchase = await tx.purchase.find_unique({ where: { id: material.purchase_id } })",
          "after": "const purchase = await tx.purchase.findUnique({ where: { id: material.purchase_id } })"
        },
        {
          "line": 1406,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await tx.product_sku.find_unique({",
          "after": "const sku = await tx.product_sku.findUnique({"
        },
        {
          "line": 1538,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const sku = await tx.product_sku.find_unique({",
          "after": "const sku = await tx.product_sku.findUnique({"
        },
        {
          "line": 1681,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existing = await prisma.product_sku.find_unique({",
          "after": "const existing = await prisma.product_sku.findUnique({"
        },
        {
          "line": 1698,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existing = await prisma.product_sku.find_unique({",
          "after": "const existing = await prisma.product_sku.findUnique({"
        },
        {
          "line": 1715,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const materialRecord = await tx.material.find_unique({",
          "after": "const materialRecord = await tx.material.findUnique({"
        },
        {
          "line": 1820,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const skuWithDetails = await prisma.product_sku.find_unique({",
          "after": "const skuWithDetails = await prisma.product_sku.findUnique({"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\suppliers.ts",
      "fixes_count": 6,
      "fixes": [
        {
          "line": 61,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const suppliers = await prisma.supplier.find_many({",
          "after": "const suppliers = await prisma.supplier.findMany({"
        },
        {
          "line": 177,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const allActiveSuppliers = await prisma.supplier.find_many({",
          "after": "const allActiveSuppliers = await prisma.supplier.findMany({"
        },
        {
          "line": 227,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const existingSupplier = await prisma.supplier.find_first({",
          "after": "const existingSupplier = await prisma.supplier.findFirst({"
        },
        {
          "line": 256,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.to_lower_case\\b",
          "before": "const normalizedName = validatedData.name.to_lower_case().trim()",
          "after": "const normalizedName = validatedData.name.toLowerCase().trim()"
        },
        {
          "line": 257,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const similarSuppliers = await prisma.supplier.find_many({",
          "after": "const similarSuppliers = await prisma.supplier.findMany({"
        },
        {
          "line": 264,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.to_lower_case\\b",
          "before": "s.name.to_lower_case().trim() === normalizedName && s.name !== validatedData.name",
          "after": "s.name.toLowerCase().trim() === normalizedName && s.name !== validatedData.name"
        }
      ]
    },
    {
      "file": "backend\\src\\routes\\users.ts",
      "fixes_count": 8,
      "fixes": [
        {
          "line": 61,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "prisma.user.find_many({",
          "after": "prisma.user.findMany({"
        },
        {
          "line": 115,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const user = await prisma.user.find_unique({",
          "after": "const user = await prisma.user.findUnique({"
        },
        {
          "line": 246,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingUser = await prisma.user.find_unique({",
          "after": "const existingUser = await prisma.user.findUnique({"
        },
        {
          "line": 262,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingEmail = await prisma.user.find_unique({",
          "after": "const existingEmail = await prisma.user.findUnique({"
        },
        {
          "line": 345,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingUser = await prisma.user.find_unique({",
          "after": "const existingUser = await prisma.user.findUnique({"
        },
        {
          "line": 361,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const usernameExists = await prisma.user.find_first({",
          "after": "const usernameExists = await prisma.user.findFirst({"
        },
        {
          "line": 381,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_first\\b",
          "before": "const emailExists = await prisma.user.find_first({",
          "after": "const emailExists = await prisma.user.findFirst({"
        },
        {
          "line": 476,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_unique\\b",
          "before": "const existingUser = await prisma.user.find_unique({",
          "after": "const existingUser = await prisma.user.findUnique({"
        }
      ]
    },
    {
      "file": "backend\\src\\utils\\fieldConverter.ts",
      "fixes_count": 2,
      "fixes": [
        {
          "line": 16,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.to_lower_case\\b",
          "before": "return str.replace(/[A-Z]/g, letter => `_${letter.to_lower_case()}`);",
          "after": "return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);"
        },
        {
          "line": 25,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.to_upper_case\\b",
          "before": "return str.replace(/_([a-z])/g, (_, letter) => letter.to_upper_case());",
          "after": "return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());"
        }
      ]
    },
    {
      "file": "backend\\src\\utils\\operationLogger.ts",
      "fixes_count": 1,
      "fixes": [
        {
          "line": 314,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const logs = await prisma.edit_log.find_many({",
          "after": "const logs = await prisma.edit_log.findMany({"
        }
      ]
    },
    {
      "file": "backend\\src\\utils\\updateImageUrls.ts",
      "fixes_count": 1,
      "fixes": [
        {
          "line": 17,
          "type": "API修复",
          "pattern": "\\b(\\w+)\\.find_many\\b",
          "before": "const purchases = await prisma.purchase.find_many({",
          "after": "const purchases = await prisma.purchase.findMany({"
        }
      ]
    }
  ],
  "errors": []
}