import { PrismaClient } from '@prisma/client'
import mysql from 'mysql2/promise'

const prisma = new PrismaClient()

async function check_photos_schema() {
  let connection
  
  try {
    // ÂàõÂª∫Áõ¥Êé•Êï∞ÊçÆÂ∫ìËøûÊé•
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: 'ZWSloveWCC123',
      database: 'crystal_erp_dev'
    })

    console.log('üîç Ê£ÄÊü•photosÂ≠óÊÆµÁöÑÊï∞ÊçÆÂ∫ìÁªìÊûÑ')
    console.log('=' * 50)

    // 1. Ê£ÄÊü•materialsË°®ÁªìÊûÑ
    console.log('\nüìä Ê£ÄÊü•materialsË°®ÁöÑphotosÂ≠óÊÆµÁªìÊûÑ:')
    
    const [materials_schema] = await connection.query(`
      DESCRIBE materials
    `)
    
    const photos_field = materials_schema.find(field => field.Field === 'photos')
    if (photos_field) {
      console.log('MaterialsË°®photosÂ≠óÊÆµ‰ø°ÊÅØ:')
      console.log(`- Â≠óÊÆµÂêç: ${photos_field.Field}`)
      console.log(`- Êï∞ÊçÆÁ±ªÂûã: ${photos_field.Type}`)
      console.log(`- ÊòØÂê¶ÂÖÅËÆ∏NULL: ${photos_field.Null}`)
      console.log(`- ÈªòËÆ§ÂÄº: ${photos_field.Default}`)
    } else {
      console.log('‚ùå materialsË°®‰∏≠Ê≤°ÊúâÊâæÂà∞photosÂ≠óÊÆµ')
    }

    // 2. Ê£ÄÊü•purchaseË°®ÁªìÊûÑ
    console.log('\nüìä Ê£ÄÊü•purchaseË°®ÁöÑphotosÂ≠óÊÆµÁªìÊûÑ:')
    
    const [purchase_schema] = await connection.query(`
      DESCRIBE purchases
    `)
    
    const purchase_photos_field = purchase_schema.find(field => field.Field === 'photos')
    if (purchase_photos_field) {
      console.log('PurchaseË°®photosÂ≠óÊÆµ‰ø°ÊÅØ:')
      console.log(`- Â≠óÊÆµÂêç: ${purchase_photos_field.Field}`)
      console.log(`- Êï∞ÊçÆÁ±ªÂûã: ${purchase_photos_field.Type}`)
      console.log(`- ÊòØÂê¶ÂÖÅËÆ∏NULL: ${purchase_photos_field.Null}`)
      console.log(`- ÈªòËÆ§ÂÄº: ${purchase_photos_field.Default}`)
    } else {
      console.log('‚ùå purchaseË°®‰∏≠Ê≤°ÊúâÊâæÂà∞photosÂ≠óÊÆµ')
    }

    // 3. Ê£ÄÊü•ÂÆûÈôÖÊï∞ÊçÆÁöÑHEXÂÄº
    console.log('\nüîç Ê£ÄÊü•ÂÆûÈôÖÊï∞ÊçÆÁöÑHEXÂÄº:')
    
    const [hex_data] = await connection.query(`
      SELECT 
        id,
        purchase_name,
        HEX(photos) as photos_hex,
        LENGTH(photos) as photos_length,
        CAST(photos AS CHAR) as photos_char
      FROM purchases 
      WHERE purchase_type IN ('ACCESSORIES', 'FINISHED_MATERIAL')
        AND photos IS NOT NULL
      LIMIT 2
    `)
    
    hex_data.forEach((row, index) => {
      console.log(`\n${index + 1}. ${row.purchase_name}:`)
      console.log(`   - HEXÂÄº: ${row.photos_hex}`)
      console.log(`   - ÈïøÂ∫¶: ${row.photos_length}`)
      console.log(`   - ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶: ${row.photos_char}`)
      
      // Â∞ùËØï‰ªéHEXËß£Á†Å
      try {
        const hex_str = row.photos_hex
        let decoded = ''
        for (let i = 0; i < hex_str.length; i += 2) {
          decoded += String.fromCharCode(parseInt(hex_str.substr(i, 2), 16))
        }
        console.log(`   - HEXËß£Á†ÅÁªìÊûú: ${decoded}`)
      } catch (error) {
        console.log(`   - HEXËß£Á†ÅÂ§±Ë¥•: ${error.message}`)
      }
    })

    // 4. Â∞ùËØïÁõ¥Êé•Êõ¥Êñ∞‰∏∫Ê≠£Á°ÆÁöÑJSONÊ†ºÂºè
    console.log('\nüîß Â∞ùËØïÁõ¥Êé•Êõ¥Êñ∞‰∏∫Ê≠£Á°ÆÁöÑJSONÊ†ºÂºè:')
    
    const [materials_to_update] = await connection.query(`
      SELECT 
        m.id as material_id,
        m.material_name,
        m.purchase_id,
        CAST(p.photos AS CHAR) as purchase_photos_char
      FROM materials m
      LEFT JOIN purchases p ON m.purchase_id = p.id
      WHERE m.material_type IN ('ACCESSORIES', 'FINISHED_MATERIAL')
        AND p.photos IS NOT NULL
    `)
    
    console.log(`ÊâæÂà∞ ${materials_to_update.length} Êù°ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑËÆ∞ÂΩï`)
    
    let update_success = 0
    let update_error = 0
    
    for (const record of materials_to_update) {
      console.log(`\nÂ§ÑÁêÜ ${record.material_name}:`)
      console.log(`   - Purchase photos (CHAR): ${record.purchase_photos_char}`)
      
      try {
        // Â∞ÜÂçï‰∏™URLËΩ¨Êç¢‰∏∫JSONÊï∞ÁªÑ
        const photos_array = [record.purchase_photos_char]
        const photos_json = JSON.stringify(photos_array)
        
        console.log(`   - ËΩ¨Êç¢‰∏∫JSON: ${photos_json}`)
        
        // ‰ΩøÁî®Ê≠£Á°ÆÁöÑJSONÊ†ºÂºèÊõ¥Êñ∞
        await connection.query(
          'UPDATE materials SET photos = ? WHERE id = ?',
          [photos_json, record.material_id]
        )
        
        console.log(`   ‚úÖ Êõ¥Êñ∞ÊàêÂäü`)
        update_success++
        
      } catch (error) {
        console.log(`   ‚ùå Êõ¥Êñ∞Â§±Ë¥•: ${error.message}`)
        update_error++
      }
    }
    
    console.log(`\nüìä Êõ¥Êñ∞ÁªìÊûú:`)
    console.log(`- ÊàêÂäü: ${update_success}`)
    console.log(`- Â§±Ë¥•: ${update_error}`)

    // 5. ÊúÄÁªàÈ™åËØÅ
    console.log('\nüîç ÊúÄÁªàÈ™åËØÅ:')
    
    const [final_check] = await connection.query(`
      SELECT 
        id,
        material_name,
        material_type,
        photos,
        LENGTH(photos) as photos_length
      FROM materials 
      WHERE material_type IN ('ACCESSORIES', 'FINISHED_MATERIAL')
      ORDER BY material_type, material_name
    `)
    
    let valid_photos = 0
    let invalid_photos = 0
    
    final_check.forEach((material, index) => {
      console.log(`\n${index + 1}. ${material.material_name}:`)
      console.log(`   - photosÂ≠óÊÆµ: ${material.photos || 'NULL'}`)
      console.log(`   - ÈïøÂ∫¶: ${material.photos_length || 0}`)
      
      if (material.photos && material.photos !== 'null') {
        try {
          const parsed = JSON.parse(material.photos)
          if (Array.isArray(parsed) && parsed.length > 0) {
            console.log(`   - Áä∂ÊÄÅ: ‚úÖ ÊúâÊïàJSONÊï∞ÁªÑÔºåÂåÖÂê´ ${parsed.length} Âº†ÂõæÁâá`)
            console.log(`   - ÂõæÁâáURL: ${parsed[0]}`)
            valid_photos++
          } else {
            console.log(`   - Áä∂ÊÄÅ: ‚ö†Ô∏è  Á©∫Êï∞ÁªÑ`)
            invalid_photos++
          }
        } catch (error) {
          console.log(`   - Áä∂ÊÄÅ: ‚ùå JSONËß£ÊûêÂ§±Ë¥•: ${error.message}`)
          invalid_photos++
        }
      } else {
        console.log(`   - Áä∂ÊÄÅ: ‚ùå Êó†ÂõæÁâáÊï∞ÊçÆ`)
        invalid_photos++
      }
    })
    
    console.log(`\nüéØ ÊúÄÁªàÁªìÊûú:`)
    console.log(`- ÊúâÊïàÂõæÁâáÊï∞ÊçÆ: ${valid_photos}/${final_check.length}`)
    console.log(`- Êó†ÊïàÂõæÁâáÊï∞ÊçÆ: ${invalid_photos}/${final_check.length}`)
    
    if (valid_photos > 0) {
      console.log('\nüéâ ÂõæÁâáÊï∞ÊçÆ‰øÆÂ§çÊàêÂäüÔºÅ')
      console.log('\nüìù ‰∏ã‰∏ÄÊ≠•:')
      console.log('1. Âà∑Êñ∞ÂâçÁ´ØÈ°µÈù¢')
      console.log('2. Ê£ÄÊü•ÈÖç‰ª∂ÂíåÊàêÂìÅÂ∫ìÂ≠òÈ°µÈù¢ÁöÑÂõæÁâáÊòæÁ§∫')
      console.log('3. Â¶ÇÊûúÂõæÁâáURLÂåÖÂê´Âõ∫ÂÆöIPÔºåÂâçÁ´ØÁöÑfixImageUrlÂáΩÊï∞‰ºöËá™Âä®ËΩ¨Êç¢')
    } else {
      console.log('\n‚ùå ÂõæÁâáÊï∞ÊçÆ‰ªçÁÑ∂ÊúâÈóÆÈ¢òÔºåÈúÄË¶ÅËøõ‰∏ÄÊ≠•Ë∞ÉËØï')
    }
    
  } catch (error) {
    console.error('‚ùå Ê£ÄÊü•ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error)
    throw error
  } finally {
    if (connection) {
      await connection.end()
    }
    await prisma.$disconnect()
  }
}

// ËøêË°åÊ£ÄÊü•
check_photos_schema().catch(error => {
  console.error('Ê£ÄÊü•Â§±Ë¥•:', error)
  process.exit(1)
})